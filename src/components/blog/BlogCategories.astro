---
interface Props {
  categories: Record<string, number>;
}

const { categories } = Astro.props;
---

<div class="flex flex-wrap items-center gap-3 justify-center mt-2" data-aos="fade-up">
  <div class="flex flex-wrap gap-3 justify-center">
    <button 
      data-category="All"
      class="category-filter px-6 py-2 rounded-full text-sm font-medium transition-all duration-200 bg-gradient-to-r from-[#0d9488] to-[#3b82f6] text-white active"
    >
      All
      <span class="ml-2 text-xs opacity-60">({categories.All})</span>
    </button>
    
    {Object.entries(categories).filter(([category]) => category !== 'All').map(([category, count]) => (
      <button 
        data-category={category}
        class="category-filter px-6 py-2 rounded-full text-sm font-medium transition-all duration-200 bg-white/10 text-white-600 hover:bg-white/20"
      >
        {category}
        <span class="ml-2 text-xs opacity-60">({count})</span>
      </button>
    ))}
  </div>
  
  <button 
    id="clear-filters"
    class="px-6 py-2 rounded-full text-sm font-medium transition-all duration-200 border border-white/20 text-white-600 hover:bg-white/10 hover:border-white/40 hidden"
  >
    <div class="flex items-center gap-2">
      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
      </svg>
      Clear Filters
    </div>
  </button>
</div>

<script>
  const categoryButtons = document.querySelectorAll('.category-filter');
  const clearFiltersButton = document.getElementById('clear-filters');

  function updateActiveState(selectedCategory) {
    categoryButtons.forEach(button => {
      const category = button.getAttribute('data-category');
      if (category === selectedCategory) {
        button.classList.remove('bg-white/10', 'text-white-600');
        button.classList.add('bg-gradient-to-r', 'from-[#0d9488]', 'to-[#3b82f6]', 'text-white', 'active');
      } else {
        button.classList.remove('bg-gradient-to-r', 'from-[#0d9488]', 'to-[#3b82f6]', 'text-white', 'active');
        button.classList.add('bg-white/10', 'text-white-600');
      }
    });

    // Show/hide clear filters button
    if (selectedCategory === 'All') {
      clearFiltersButton.classList.add('hidden');
    } else {
      clearFiltersButton.classList.remove('hidden');
    }
  }

  function dispatchFilterEvent(category) {
    const event = new CustomEvent('filterCategory', {
      detail: { category }
    });
    document.dispatchEvent(event);
  }

  // Add click handlers to category buttons
  categoryButtons.forEach(button => {
    button.addEventListener('click', () => {
      const category = button.getAttribute('data-category');
      updateActiveState(category);
      dispatchFilterEvent(category);
    });
  });

  // Add click handler to clear filters button
  clearFiltersButton?.addEventListener('click', () => {
    updateActiveState('All');
    dispatchFilterEvent('All');
  });
</script>

<style>
  .category-filter {
    transition: all 0.3s ease;
  }

  .category-filter:hover {
    transform: translateY(-2px);
  }

  .category-filter.active {
    box-shadow: 0 4px 12px rgba(13, 148, 136, 0.2);
  }
</style>